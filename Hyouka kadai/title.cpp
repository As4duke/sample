/*******************************************************************************
* タイトル:		評価課題 RPGゲーム
* プログラム名:	title.cpp
* 作成者:		GP11B-341 29 益子 聖渚
* 作成日:		2018/06/08
*******************************************************************************/

/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include "main.h"
#include "title.h"
#include "Player.h"


/*******************************************************************************
* マクロ定義
*******************************************************************************/
// タイトル画面用
#define TH_MAX      (5)        // 縦幅
#define TW_MAX      (25)        // 横幅


/*******************************************************************************
* 構造体定義
*******************************************************************************/


/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/




/*******************************************************************************
* グローバル変数
*******************************************************************************/

int s = 0;                    //whileから抜け出すための変数
int t = 0;                    //同上
char title[TH_MAX][TW_MAX + 1] = {
	"**+**",
	"*   *       初めから",
	"+   -       続きから",
	"*   *        やめる",
	"**-**",
};
int arrow_x,arrow_y, old_arrow_x, old_arrow_y;

/*******************************************************************************
 関数名:	DrawTitle ( void )
 引数:	void
 戻り値:	正常終了: int型の 0
 説明:	メイン関数
*******************************************************************************/
void DrawTitle(void)
{

	printf("         _______  ______    _______  _______  _______  __    _  _______\n");
	Sleep(300);
	printf("        |       ||    _ |  |       ||       ||       ||  |  | ||       |\n");
	Sleep(300);
	printf("        |    ___||   | ||  |  _____||_     _||    ___||   |_| ||  _____|\n");
	Sleep(300);
	printf("        |   |___ |   |_||_ | |_____   |   |  |   |___ |       || |_____\n");
	Sleep(300);
	printf("        |    ___||    __  ||_____  |  |   |  |    ___||  _    ||_____  |\n");
	Sleep(300);
	printf("        |   |___ |   |  | | _____| |  |   |  |   |___ | | |   | _____| |\n");
	Sleep(300);
	printf("        |_______||___|  |_||_______|  |___|  |_______||_|  |__||_______|\n");

	

		Title_arrow();          //アローの初期化処理
		DrawTitleBG();          // BG描画 (背景描画)


		while (1)
		{
			if (s > t)			//ループ脱出用
			{
				break;
			}

			// 何かキー入力があったら処理を行う
			if (_kbhit())
			{
				// 各種更新処理
				UpdateTitle_arrow();    // アローの更新処理
				if (s == t)
				{

					DrawArrow();		    // アローを描画する為に位置をセット
					DrawTitleBG();			// BG描画 (背景描画)

				}
			}
			/* 処理速度調整 */
			Sleep(50);
		}




}

/*******************************************************************************
関数名:	void Title_arrow( void )
引数:	void
戻り値:	void
説明:	アローの初期化処理
*******************************************************************************/
void Title_arrow(void)
{
	/* アローの初期位置設定 */
	arrow_x = 2;
	arrow_y = 1;
	title[arrow_y][arrow_x] = '>';

	//本当はここのところでパラメーターの設定も行う

}
/*******************************************************************************
関数名:	void UpdateTitle_arrow( void )
引数:	void
戻り値:	void
説明:	プレイヤーの更新処理
*******************************************************************************/
void UpdateTitle_arrow(void)
{
	int key;
	int old_arrow_x, old_arrow_y;

	/* キーが入力されたら */
	key = _getch();
	if ((key == 0) || (key == 224))
	{
		key = _getch();
	}

	/* 前回の表示位置の消去*/
	title[arrow_y][arrow_x] = ' ';

	/* プレイヤーの位置判定 */
	old_arrow_x = arrow_x;
	old_arrow_y = arrow_y;
	switch (key)
	{

	case 's':
	case 0x50:	// 下へ移動する
		arrow_y++;
		break;

	case 'w':
	case 0x48:	// 上へ移動する
		arrow_y--;
		break;

	case VK_RETURN:	// 決定
	{
		select();
	}
		break;

	default:	// 移動しない
		break;
	}

	// 移動した先は上限界
	if (title[arrow_y][arrow_x] == '+')
	{	// +なら下に
		arrow_x = 2;
		arrow_y = 3;
	}
	
	// 移動した先が下限界
	if (title[arrow_y][arrow_x] == '-')
	{	// -なら上に移動させる
		arrow_x = 2;
		arrow_y = 1;
	}

	//DirectXでは、アニメーションの更新処理も行う

}
/*******************************************************************************
関数名:	void DrawArrow( void )
引数:	void
戻り値:	void
説明:	プレイヤーの描画処理
*******************************************************************************/
void DrawArrow(void)
{
	/* プレイヤーの位置更新 */
	title[arrow_y][arrow_x] = '>';

}
/*******************************************************************************
関数名:	void DrawTitleBG( void )
引数:	void
戻り値:	void
説明:	BG表示 ( BG = バックグラウンド・背景の略だよ )
*******************************************************************************/
void DrawTitleBG(void)
{
	int i;

	/* 画面クリア */
	system("cls");

	printf("         _______  ______    _______  _______  _______  __    _  _______\n");
	printf("        |       ||    _ |  |       ||       ||       ||  |  | ||       |\n");
	printf("        |    ___||   | ||  |  _____||_     _||    ___||   |_| ||  _____|\n");
	printf("        |   |___ |   |_||_ | |_____   |   |  |   |___ |       || |_____\n");
	printf("        |    ___||    __  ||_____  |  |   |  |    ___||  _    ||_____  |\n");
	printf("        |   |___ |   |  | | _____| |  |   |  |   |___ | | |   | _____| |\n");
	printf("        |_______||___|  |_||_______|  |___|  |_______||_|  |__||_______|\n");

	/* マップ描画処理 */
	printf("\n\n\n");
	for (i = 0; i < TH_MAX; i++)
	{
		printf("                       ");
		printf("%s\n", &title[i][0]);
	}
	/* 処理速度調整 */
	Sleep(30);
}
/*******************************************************************************
関数名:	void select( void )
引数:	void
戻り値:	void
説明:	タイトル画面の選択時の処理
*******************************************************************************/
void select(void)
{
	
	switch (arrow_y)
	{
	case 1:
		system("cls");
		printf("\n\n\n\n\n                             ");
		printf("新たな冒険が始まる!");


		s++;
		
		break;
	case 2:
		printf("\n\n                              ");
		printf("おきのどくですが\n                              ぼうけんのしょは\n                              きえてしまいました。\n");
		rewind(stdin);
		_getch();
		break;
	case 3:
		exit(0);
		break;
	default:
		break;

	}
}
/*******************************************************************************
Set 関数
*******************************************************************************/

