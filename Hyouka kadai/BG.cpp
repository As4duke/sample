/*******************************************************************************
* タイトル:		評価課題 RPGゲーム
* プログラム名:	BG.cpp
* 作成者:		GP11B-341 29 益子　聖渚
* 作成日:		2018/06/08
*******************************************************************************/

/***************************************************************************
* インクルードファイル****
*******************************************************************************/
#include "main.h"
#include "battle_1.h"
#include "Player.h"
#include "Enemy.h"
#include "BG.h"

/*******************************************************************************
* マクロ定義
*******************************************************************************/



/*******************************************************************************
* 構造体定義
*******************************************************************************/



/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/

/*******************************************************************************
* グローバル変数
*******************************************************************************/

char map[FH_MAX][FW_MAX + 1] = { // 横を+1しているのは文末のNULLの分
	"********************************************************************************",
	"*                                                    *|||*                     *",
	"*             *                                      *|||*                   ***",                    
	"*            ***                                     *|||*                ***  *",
	"*           *****                                    *|||*              **     *",
	"*                                                    *|||***************       *",
	"*                                                    *****                     *",
	"*                                                                              *",
	"*                                                    *****                     *",
	"*                                                    *|||***************       *",
	"*                                    *               *|||*              **     *",
	"*              *                    ***              *|||*                ***  *",
	"*             ***                  *****             *|||*                   ***",
	"*            *****                                   *|||*                     *",
	"********************************************************************************",
};
/*******************************************************************************
関数名:	void InitBG( void )
引数:	void
戻り値:	void
説明:	BGsyokika ( BG = バックグラウンド・背景の略だよ )
*******************************************************************************/
void InitBG(void)
{
	// imaha nasi
}
/*******************************************************************************
関数名:	void UpdataBG( void )
引数:	void
戻り値:	void
説明:	BGupdata ( BG = バックグラウンド・背景の略だよ )
*******************************************************************************/
void UpdataBG(void)
{
	//imaha nasi
}

/*******************************************************************************
関数名:	void DrawBG( void )
引数:	void
戻り値:	void
説明:	BG表示 ( BG = バックグラウンド・背景の略だよ )
*******************************************************************************/
void DrawBG(void)
{
	int i;
	PLAYER *player = GetPlayerAdr(0);
	ENEMY *enemy = GetEnemyAdr(0);					//エネミー0番のアドレスを取得
	ENEMY *enemy1 = GetEnemyAdr(1);					//同上    1番
	ENEMY *enemy2 = GetEnemyAdr(2);					//同上    2番
	ENEMY *enemy3 = GetEnemyAdr(3);					//同上    3番
	ENEMY *enemy4 = GetEnemyAdr(4);					//同上　　4番



	/* 画面クリア */
	system("cls");

	/* マップ描画処理 */
	for (i = 0; i < FH_MAX; i++)
	{
		printf("%s\n", &map[i][0]);
	}

	if ((player->fx == enemy->fx) && (player->fy == enemy->fy))         // エネミーの判定   Knight
	{
		system("cls");
		printf("\n\n                             %sと遭遇した!!\n\n",&enemy->name[0]);
		printf("________________________________________________________________________________\n");

		rewind(stdin);
		getchar();

		Battle_Knight();

		// ここでバトル関数へ飛ぶ
		system("cls");

		// バトルから戻ってきたらエネミーを消す
		enemy->fx = 70;
		enemy->fy =  4;									//えねみーの位置を作って置く
		map[enemy->fy][enemy->fx] = ' ';

		// プレイヤーを元の位置で再表示
		map[player->fy][player->fx] = 'P';

	}
	else
	{
		printf("                           ---------------------\n");
		printf("                          |                     |\n");
		printf("                          | Push Key ← → ↑↓ |\n");
		printf("                          |         OR          |\n");
		printf("                          | Push Key W A S D    |\n");
		printf("                          |                     |\n");
		printf("                           --------------------- \n");
		//printf("                          |%s                 |\n", player->status.name[0]);
		printf("                               現在のHP:%d         \n", player->status.HP);
		printf("                               現在のLV:%d         ", player->status.LV);

	}

	if ((player->fx == enemy1->fx) && (player->fy == enemy1->fy))         // エネミーの判定  Slime
	{
		system("cls");
		printf("\n\n                             %sと遭遇した!!\n\n", &enemy1->name[1]);
		printf("________________________________________________________________________________\n");


		rewind(stdin);
		getchar();

		Battle_Slime();

		// ここでバトル関数へ飛ぶ
		system("cls");

		// バトルから戻ってきたらエネミーを消す
		enemy1->fx = 70;
		enemy1->fy =  4;									
		map[enemy1->fy][enemy1->fx] = ' ';

		// プレイヤーを元の位置で再表示
		map[player->fy][player->fx] = 'P';

	}

	if ((player->fx == enemy2->fx) && (player->fy == enemy2->fy))         // エネミーの判定     Wolf
	{
		system("cls");
		printf("\n\n                             %sと遭遇した!!\n\n", &enemy2->name[2]);
		printf("________________________________________________________________________________\n");


		rewind(stdin);
		getchar();

		Battle_Wolf();

		// ここでバトル関数へ飛ぶ
		system("cls");

		// バトルから戻ってきたらエネミーを消す
		enemy2->fx = 70;
		enemy2->fy =  4;									
		map[enemy2->fy][enemy2->fx] = ' ';

		// プレイヤーを元の位置で再表示
		map[player->fy][player->fx] = 'P';

	}
	if ((player->fx == enemy3->fx) && (player->fy == enemy3->fy))         // エネミーの判定   Dragon
	{
		system("cls");
		printf("\n\n                             %sと遭遇した!!\n\n", &enemy3->name[3]);
		printf("________________________________________________________________________________\n");

		rewind(stdin);
		getchar();

		Battle_Dragon();

		// ここでバトル関数へ飛ぶ
		system("cls");

		// バトルから戻ってきたらエネミーを消す
		enemy3->fx = 70;
		enemy3->fy =  4;									
		map[enemy3->fy][enemy3->fx] = ' ';

		// プレイヤーを元の位置で再表示
		map[player->fy][player->fx] = 'P';

	}
	if ((player->fx == enemy4->fx) && (player->fy == enemy4->fy))         // エネミーの判定   Boss
	{
		system("cls");
		printf("\n\n                             %sと遭遇した!!\n\n", &enemy4->name[4]);
		printf("________________________________________________________________________________\n");


		rewind(stdin);
		getchar();

		Battle_Boss();

		// ここでバトル関数へ飛ぶ
		system("cls");

		// バトルから戻ってきたらエネミーを消す
		enemy4->fx = 70;
		enemy4->fy =  4;									
		map[enemy4->fy][enemy4->fx] = ' ';

		// プレイヤーを元の位置で再表示
		map[player->fy][player->fx] = 'P';

	}

}

/*******************************************************************************
関数名:	void UninitBG( void )
引数:	void
戻り値:	void
説明:	BGsyuuryou ( BG = バックグラウンド・背景の略だよ )
*******************************************************************************/
void UninitBG(void)
{
	//tokuninasi
}
/*******************************************************************************
関数名:	void GetMapAdr( int y, int x )
引数:	void
戻り値:	void
説明:	BGsyokika ( BG = バックグラウンド・背景の略だよ )
*******************************************************************************/
char *GetMapAdr(int y, int x)
{
	return &map[y][x];
}
